{"dependencies":{"npm":{"handlebars":"latest","vis":"3.x.x","chix-flow":"0.x.x","dot-object":"0.x.x"}},"nodeDefinitions":{"https://serve-chix.rhcloud.com/nodes/{ns}/{name}":{"template":{"handlebars":{"_id":"52ea878d1905561c7aa3bdbc","name":"handlebars","ns":"template","description":"Handlebars Template engine","phrases":{"active":"Compiling handlebars template"},"ports":{"input":{"body":{"type":"string","format":"html","title":"Template body","description":"The body of the handlebars template","required":true},"vars":{"type":"object","title":"Input variables","description":"the input variables for this template","default":{}},"handlebars":{"type":"function","title":"Handlebars","default":null}},"output":{"out":{"title":"HTML","type":"string"}}},"dependencies":{"npm":{"handlebars":"latest"}},"fn":"var hb = input.handlebars || handlebars;\nvar tpl = hb.compile(input.body);\noutput = {\n  out: tpl(input.vars)\n}\n","provider":"https://serve-chix.rhcloud.com/nodes/{ns}/{name}"}},"dom":{"setHtml":{"_id":"52be32d46a14bb6fbd924a24","name":"setHtml","ns":"dom","description":"dom setHtml","async":true,"phrases":{"active":"Adding html"},"ports":{"input":{"element":{"type":"HTMLElement","title":"Dom Element"},"html":{"type":"string","format":"html","title":"html","async":true}},"output":{"element":{"type":"HTMLElement","title":"Dom Element"}}},"fn":"on.input.html = function(data) {\n  input.element.innerHTML = data;\n  output({ element: input.element });\n};\n","provider":"https://serve-chix.rhcloud.com/nodes/{ns}/{name}"},"querySelector":{"_id":"527299bb30b8af4b8910216b","name":"querySelector","ns":"dom","title":"querySelector","description":"[Document query selector](https://developer.mozilla.org/en-US/docs/Web/API/document.querySelector)","expose":["document"],"phrases":{"active":"Gathering elements matching criteria: {{input.selector}}"},"ports":{"input":{"element":{"title":"Element","type":"HTMLElement","default":null},"selector":{"title":"Selector","type":"string"}},"output":{"element":{"title":"Element","type":"HTMLElement"},"selection":{"title":"Selection","type":"HTMLElement"},"error":{"title":"Error","type":"Error"}}},"fn":"var el = input.element ? input.element : document;\noutput = {\n  element: el\n};\n\nvar selection = el.querySelector(input.selector);\nif(selection) {\n  output.selection = selection;\n} else {\n  output.error = Error('Selector ' + input.selector + ' did not match');\n}\n","provider":"https://serve-chix.rhcloud.com/nodes/{ns}/{name}"}},"vis":{"network":{"_id":"548e270f0e9c46154a015c89","name":"network","ns":"vis","title":"Vis Network","description":"Create a network visualization, displaying nodes and edges.","dependencies":{"npm":{"vis":"3.x.x"}},"phrases":{"active":"Creating Vis network"},"ports":{"input":{"container":{"type":"Element","title":"Container","description":"The DOM element in which the Network will be created. Normally a div element."},"data":{"type":"object","title":"Data","description":"An object containing parameters {Array} nodes\n{Array} edges","properties":{"nodes":{"title":"Nodes","type":"array","default":[]},"edges":{"title":"Edges","type":"array","default":[]},"dot":{"title":"String","type":"string","required":false}}},"options":{"type":"object","title":"Options","description":"Options","properties":{"nodes":{"type":"object","properties":{"mass":{"type":"number","title":"Mass","default":1},"radiusMin":{"type":"number","title":"RadiusMin","default":10},"radiusMax":{"type":"number","title":"RadiusMax","default":30},"radius":{"type":"number","title":"Radius","default":10},"shape":{"type":"string","title":"Shape","default":"ellipse"},"widthMin":{"type":"number","title":"WidthMin","default":16},"widthMax":{"type":"number","title":"WidthMax","default":64},"fontColor":{"type":"string","title":"FontColor","default":"black"},"fontSize":{"type":"number","title":"FontSize","default":14},"fontFace":{"type":"string","title":"FontFace","default":"verdana"},"level":{"type":"number","title":"Level","default":-1},"color":{"type":"object","properties":{"border":{"type":"string","title":"Border","default":"#2B7CE9"},"background":{"type":"string","title":"Background","default":"#97C2FC"},"highlight":{"type":"object","properties":{"border":{"type":"string","title":"Border","default":"#2B7CE9"},"background":{"type":"string","title":"Background","default":"#D2E5FF"}}},"hover":{"type":"object","properties":{"border":{"type":"string","title":"Border","default":"#2B7CE9"},"background":{"type":"string","title":"Background","default":"#D2E5FF"}}}}},"borderColor":{"type":"string","title":"BorderColor","default":"#2B7CE9"},"backgroundColor":{"type":"string","title":"BackgroundColor","default":"#97C2FC"},"highlightColor":{"type":"string","title":"HighlightColor","default":"#D2E5FF"},"borderWidth":{"type":"number","title":"BorderWidth","default":1}}},"edges":{"type":"object","properties":{"widthMin":{"type":"number","title":"WidthMin","default":1},"widthMax":{"type":"number","title":"WidthMax","default":15},"width":{"type":"number","title":"Width","default":1},"widthSelectionMultiplier":{"type":"number","title":"WidthSelectionMultiplier","default":2},"hoverWidth":{"type":"number","title":"HoverWidth","default":1.5},"style":{"type":"string","title":"Style","default":"line"},"color":{"type":"object","properties":{"color":{"type":"string","title":"Color","default":"#848484"},"highlight":{"type":"string","title":"Highlight","default":"#848484"},"hover":{"type":"string","title":"Hover","default":"#848484"}}},"fontColor":{"type":"string","title":"FontColor","default":"#343434"},"fontSize":{"type":"number","title":"FontSize","default":14},"fontFace":{"type":"string","title":"FontFace","default":"arial"},"fontFill":{"type":"string","title":"FontFill","default":"white"},"arrowScaleFactor":{"type":"number","title":"ArrowScaleFactor","default":1},"dash":{"type":"object","properties":{"length":{"type":"number","title":"Length","default":10},"gap":{"type":"number","title":"Gap","default":5}}},"inheritColor":{"type":"string","title":"InheritColor","default":"from"}}},"configurePhysics":{"type":"boolean","title":"ConfigurePhysics","default":false},"physics":{"type":"object","properties":{"barnesHut":{"type":"object","properties":{"enabled":{"type":"boolean","title":"Enabled","default":true},"theta":{"type":"number","title":"Theta","default":1.6666666666666667},"gravitationalConstant":{"type":"number","title":"GravitationalConstant","default":-2000},"centralGravity":{"type":"number","title":"CentralGravity","default":0.3},"springLength":{"type":"number","title":"SpringLength","default":95},"springConstant":{"type":"number","title":"SpringConstant","default":0.04},"damping":{"type":"number","title":"Damping","default":0.09}}},"repulsion":{"type":"object","properties":{"centralGravity":{"type":"number","title":"CentralGravity","default":0},"springLength":{"type":"number","title":"SpringLength","default":200},"springConstant":{"type":"number","title":"SpringConstant","default":0.05},"nodeDistance":{"type":"number","title":"NodeDistance","default":100},"damping":{"type":"number","title":"Damping","default":0.09}}},"hierarchicalRepulsion":{"type":"object","properties":{"enabled":{"type":"boolean","title":"Enabled","default":false},"centralGravity":{"type":"number","title":"CentralGravity","default":0},"springLength":{"type":"number","title":"SpringLength","default":100},"springConstant":{"type":"number","title":"SpringConstant","default":0.01},"nodeDistance":{"type":"number","title":"NodeDistance","default":150},"damping":{"type":"number","title":"Damping","default":0.09}}},"damping":{"type":"null","title":"Damping","default":null},"centralGravity":{"type":"null","title":"CentralGravity","default":null},"springLength":{"type":"null","title":"SpringLength","default":null},"springConstant":{"type":"null","title":"SpringConstant","default":null}}},"clustering":{"type":"object","properties":{"enabled":{"type":"boolean","title":"Enabled","default":false},"initialMaxNodes":{"type":"number","title":"InitialMaxNodes","default":100},"clusterThreshold":{"type":"number","title":"ClusterThreshold","default":500},"reduceToNodes":{"type":"number","title":"ReduceToNodes","default":300},"chainThreshold":{"type":"number","title":"ChainThreshold","default":0.4},"clusterEdgeThreshold":{"type":"number","title":"ClusterEdgeThreshold","default":20},"sectorThreshold":{"type":"number","title":"SectorThreshold","default":100},"screenSizeThreshold":{"type":"number","title":"ScreenSizeThreshold","default":0.2},"fontSizeMultiplier":{"type":"number","title":"FontSizeMultiplier","default":4},"maxFontSize":{"type":"number","title":"MaxFontSize","default":1000},"forceAmplification":{"type":"number","title":"ForceAmplification","default":0.1},"distanceAmplification":{"type":"number","title":"DistanceAmplification","default":0.1},"edgeGrowth":{"type":"number","title":"EdgeGrowth","default":20},"nodeScaling":{"type":"object","properties":{"width":{"type":"number","title":"Width","default":1},"height":{"type":"number","title":"Height","default":1},"radius":{"type":"number","title":"Radius","default":1}}},"maxNodeSizeIncrements":{"type":"number","title":"MaxNodeSizeIncrements","default":600},"activeAreaBoxSize":{"type":"number","title":"ActiveAreaBoxSize","default":80},"clusterLevelDifference":{"type":"number","title":"ClusterLevelDifference","default":2}}},"navigation":{"type":"object","properties":{"enabled":{"type":"boolean","title":"Enabled","default":false}}},"keyboard":{"type":"object","properties":{"enabled":{"type":"boolean","title":"Enabled","default":false},"speed":{"type":"object","properties":{"x":{"type":"number","title":"X","default":10},"y":{"type":"number","title":"Y","default":10},"zoom":{"type":"number","title":"Zoom","default":0.02}}}}},"dataManipulation":{"type":"object","properties":{"enabled":{"type":"boolean","title":"Enabled","default":false},"initiallyVisible":{"type":"boolean","title":"InitiallyVisible","default":false}}},"hierarchicalLayout":{"type":"object","properties":{"enabled":{"type":"boolean","title":"Enabled","default":false},"levelSeparation":{"type":"number","title":"LevelSeparation","default":150},"nodeSpacing":{"type":"number","title":"NodeSpacing","default":100},"direction":{"type":"string","title":"Direction","default":"UD"},"layout":{"type":"string","title":"Layout","default":"hubsize"}}},"freezeForStabilization":{"type":"boolean","title":"FreezeForStabilization","default":false},"smoothCurves":{"type":"object","properties":{"enabled":{"type":"boolean","title":"Enabled","default":true},"dynamic":{"type":"boolean","title":"Dynamic","default":true},"type":{"type":"string","title":"Type","default":"continuous"},"roundness":{"type":"number","title":"Roundness","default":0.5}}},"maxVelocity":{"type":"number","title":"MaxVelocity","default":30},"minVelocity":{"type":"number","title":"MinVelocity","default":0.1},"stabilize":{"type":"boolean","title":"Stabilize","default":true},"stabilizationIterations":{"type":"number","title":"StabilizationIterations","default":1000},"locale":{"type":"string","title":"Locale","enum":["en","en_EN","enUS","nl","nl_NL","nl_BE"],"default":"en"},"tooltip":{"type":"object","properties":{"delay":{"type":"number","title":"Delay","default":300},"fontColor":{"type":"string","title":"FontColor","default":"black"},"fontSize":{"type":"number","title":"FontSize","default":14},"fontFace":{"type":"string","title":"FontFace","default":"verdana"},"color":{"type":"object","properties":{"border":{"type":"string","title":"Border","default":"#666"},"background":{"type":"string","title":"Background","default":"#FFFFC6"}}}}},"dragNetwork":{"type":"boolean","title":"DragNetwork","default":true},"dragNodes":{"type":"boolean","title":"DragNodes","default":true},"zoomable":{"type":"boolean","title":"Zoomable","default":true},"hover":{"type":"boolean","title":"Hover","default":false},"hideEdgesOnDrag":{"type":"boolean","title":"HideEdgesOnDrag","default":false},"hideNodesOnDrag":{"type":"boolean","title":"HideNodesOnDrag","default":false},"width":{"type":"string","title":"Width","default":"100%"},"height":{"type":"string","title":"Height","default":"100%"},"selectable":{"type":"boolean","title":"Selectable","default":true}}}},"output":{"network":{"type":"Network","title":"Network"},"select":{"type":"object","title":"Select","description":"Fired after the user selects or deselects a node by clicking it. Not fired when the method setSelectionis executed.","properties":{"nodes":{"title":"Nodes","type":"array"},"edges":{"title":"Edges","type":"array"}}},"click":{"type":"object","title":"Click","description":"Fired after the user clicks or taps on a touchscreen.","properties":{"nodes":{"title":"Nodes","type":"array"},"edges":{"title":"Edges","type":"array"}}},"doubleClick":{"type":"object","title":"Click","description":"Fired after the user double clicks or double taps on a touchscreen.","properties":{"nodes":{"title":"Nodes","type":"array"},"edges":{"title":"Edges","type":"array"},"pointer":{"title":"Pointer","type":"object","properties":{"DOM":{"title":"DOM Pointer","type":"object","properties":{"x":{"type":"number"},"y":{"type":"number"}}},"canvas":{"title":"Canvas Pointer","type":"object","properties":{"x":{"type":"number"},"y":{"type":"number"}}}}}}},"hoverNode":{"type":"object","title":"Hover Node","description":"Fired when the mouse is moved over a node (assuming the hover option is enabled)."},"blurNode":{"type":"object","title":"Blur Node","description":"Fired when the mouse is moved off a node (assuming the hover option is enabled)."},"resize":{"type":"object","title":"Resize","description":"Fired when the size of the canvas has been resized, either by a redraw call when the container div has changed in size, a setSize() call with new values or a setOptions() with new width and/or height values."},"dragStart":{"type":"array","title":"Drag Start","description":"Fired when a node is being dragged."},"dragEnd":{"type":"array","title":"Drag Start","description":"Fired when the dragging of a node(s) has ended."},"startStabilization":{"type":"object","description":"Fired once when the network starts the physics calculation. This ends with the stabilized event."},"stabilized":{"type":"number","description":"Fired every time the network has been stabilized. "},"viewChanged":{"type":"object","description":"Fired when the view has changed. This is when the network has moved or zoomed."},"zoom":{"type":"object","description":"Fired when the network has zoomed. "}}},"fn":"output = function() {\n  var output = cb;\n  var network = new vis.Network(\n    input.container,\n    input.data,\n    input.options\n  );\n\n  function event(name) {\n    return function(event) {\n\n      if (undefined !== event) {\n        var out = {};\n        out[name] = event;\n\n        output(out);\n      } else {\n        // viewChanged for example..\n        console.log('no output on event:', name);\n      }\n\n    };\n  }\n\n  [\n   'select','click','doubleClick','hoverNode',\n   'blurNode','resize','dragEnd','startStabilization',\n   'stabilized','viewChanged','zoom'\n  ].forEach(function(eventName) {\n    // TODO: remove these on shutdown or removal.\n    network.on(eventName, event(eventName));\n  });\n\n  output({network: network});\n\n};\n","provider":"https://serve-chix.rhcloud.com/nodes/{ns}/{name}"},"dataset":{"_id":"548e5b680e9c46154a015c8a","name":"dataset","ns":"vis","async":true,"title":"Vis Dataset","description":"Vis Dataset","dependencies":{"npm":{"vis":"3.x.x"}},"phrases":{"active":"Creating Dataset"},"ports":{"input":{"options":{"type":"Object","title":"Options"},"add":{"type":"Object","title":"Add Item","description":"Add itemto this dataset","async":true},"update":{"type":"Object","title":"Update Item","description":"Update item within dataset","async":true},"remove":{"type":"any","title":"Remove Item","description":"Remove item from this dataset","async":true}},"output":{"dataset":{"type":"DataSet","title":"DataSet"},"event":{"type":"object","title":"Event","description":"Add, update or remove event"}}},"fn":"on.start = function() {\n  // input.options will not work from here\n  state.dataset = new vis.DataSet(/*input.options*/);\n  state.dataset.on('*', function(event, properties, senderId) {\n    output({\n      event: {\n        event: event,\n        properties: properties,\n        senderId: senderId\n      }\n    });\n  });\n  output({\n    dataset: state.dataset\n  });\n};\n\non.input.add = function () {\n  state.dataset.add(data);\n};\non.input.update = function () {\n  state.dataset.update(data);\n};\non.input.remove = function () {\n  state.dataset.update(data);\n};\n\n","provider":"https://serve-chix.rhcloud.com/nodes/{ns}/{name}"}},"core":{"actor":{"_id":"5486929dab54be2e930fbd64","name":"actor","ns":"core","title":"Actor","description":"Chix Actor","phrases":{"active":"Exposing Actor"},"ports":{"input":{"actor":{"title":"Actor","type":"Actor","default":null},"loader":{"title":"Loader","type":"Loader","default":null},"io":{"title":"IO Handler","type":"IOMapHandler","default":null},"pm":{"title":"Process Manager","type":"ProcessManager","default":null}},"output":{"actor":{"title":"Actor","type":"Actor"},"addNode":{"title":"Node added","type":"xNode"},"removeNode":{"title":"Node removed","type":"xNode"},"addLink":{"title":"Link added","type":"xLink"},"removeLink":{"title":"Link removed","type":"xLink"},"connect":{"title":"Link connected","type":"xLink"},"disconnect":{"title":"Link disconnected","type":"xLink"},"qm":{"title":"Queue Manager","type":"QueueManager"},"pm":{"title":"Process Manager","type":"ProcessManager"},"io":{"title":"Io Handler","type":"IOMapHandler"},"error":{"title":"Error","type":"object"}}},"dependencies":{"npm":{"chix-flow":"0.x.x"}},"fn":"output = function (cb) {\n\n  var actor = input.actor || this.getParent();\n\n  // probably should do almost the same as npmlog monitor\n\n  actor.on('inputRequired', function (data) {\n    cb({\n      error: data\n    });\n  });\n\n  actor.on('error', function (data) {\n    cb({\n      error: data\n    });\n  });\n\n  actor.on('addNode', function (event) {\n    cb({\n      addNode: event.node\n    });\n  });\n\n  actor.on('removeNode', function (event) {\n    cb({\n      removeNode: event.node\n    });\n  });\n\n  actor.on('addLink', function (link) {\n    cb({\n      addLink: link\n    });\n  });\n\n  actor.on('removeLink', function (link) {\n    cb({\n      removeLink: link\n    });\n  });\n\n  actor.ioHandler.on('connect', function (link) {\n    cb({\n      connect: link\n    });\n  });\n\n  actor.ioHandler.on('disconnect', function (link) {\n    cb({\n      disconnect: link\n    });\n  });\n\n  // useally the actor already started so we send what we have\n  // manually\n  Object.keys(actor.nodes).forEach(function(key) {\n    cb({addNode: actor.nodes[key]});\n  });\n\n  Object.keys(actor.links).forEach(function(key) {\n    cb({addLink: actor.links[key]});\n\n    // also report them all as connected for now\n    cb({connect: actor.links[key]});\n  });\n\n  cb({\n    qm: actor.ioHandler.queueManager,\n    io: actor.ioHandler,\n    pm: actor.processManager\n  });\n\n  // not really useful I guess\n  /*\n  actor.ioHandler.on('data', function (link) {\n    cb({\n      disconnectLink: link\n    });\n  });\n  */\n\n};\n","provider":"https://serve-chix.rhcloud.com/nodes/{ns}/{name}"}},"console":{"log":{"_id":"52645993df5da0102500004e","name":"log","ns":"console","description":"Console log","async":true,"phrases":{"active":"Logging to console"},"ports":{"input":{"msg":{"type":"any","title":"Log message","description":"Logs a message to the console","async":true,"required":true}},"output":{"out":{"type":"any","title":"Log message"}}},"fn":"on.input.msg = function() {\n  console.log(data);\n  output( { out: data });\n}\n","provider":"https://serve-chix.rhcloud.com/nodes/{ns}/{name}"}},"object":{"copy":{"_id":"548ea9060e9c46154a015c8c","name":"copy","ns":"object","async":true,"description":"Copy properties from one object to another object.","phrases":{"active":"Copying object properties"},"ports":{"input":{"in":{"title":"Input Object","type":"object","async":true},"target":{"title":"Target Object","type":"object","default":{}},"from":{"title":"From","type":"array"},"to":{"title":"To","type":"array"}},"output":{"error":{"title":"Error","type":"object"},"out":{"title":"Output","type":"object"}}},"dependencies":{"npm":{"dot-object":"0.x.x"}},"fn":"on.input.in = function(data) {\n  var doo;\n  var i;\n\n  // Receiving an array, check both are of the same length.\n  if(input.from.length !== input.to.length) {\n    output({error: Error('from length does not match to length')});\n  } else {\n    doo = dot_object();\n    var merge = true;\n    // should already be done, but to make sure.\n    // not sure if it's the case when input.target is set as context\n    input.target = JSON.parse(JSON.stringify(input.target));\n    for(i = 0; i < input.from.length; i++) {\n      doo.copy(input.from[i], input.to[i], data, input.target, merge);\n    }\n\n    output({out: input.target});\n  }\n\n};\n","provider":"https://serve-chix.rhcloud.com/nodes/{ns}/{name}"}}}}}